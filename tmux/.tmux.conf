unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# set the clipboard option depending on the environment
if-shell '[ -n  "$WSL_INTEROP"  ]' \
  'set-option -g @clipboard "/mnt/c/Windows/System32/clip.exe"' \
  'set-option -g @clipboard "pbcopy"'

# set a higher length for larger session names
set -g status-left-length 100
# if a session is killed, switch to an active session instead of detaching
set -g detach-on-destroy off
# create a new key table to open either projects, or files
bind o switch-client -T ff_table
bind -T ff_table p display-popup -E "zsh -ic 'open-project'"
bind -T ff_table f display-popup -E -B -w 100% -h 100% "zsh -ic 'open-file'"
bind -T ff_table m display-popup -E -B -w 100% -h 100% "zsh -ic 'open-file pattern'"
bind -T ff_table g run-shell "zsh -ic 'open-go'"
bind -T ff_table c run-shell "zsh -ic 'open-c'"
# bind-key -T ff_table d run-shell "tmux display -p '#D ; #{pane_current_command}'"
bind -T ff_table d run-shell "zsh -ic 'trigger-directory-switch'"
# this fixes the delay that arises when using tmux and pressing escape key
set -sg escape-time 10

# enables vi keys e.g. for copy mode navigation
setw -g mode-keys vi
# v to start highlighting instead of <space>
bind -T copy-mode-vi v send -X begin-selection
# y for yank instead of enter
# old version that will jump back after copy
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'
# better version that stays there after copy
bind -T copy-mode-vi y send-keys -X copy-selection \; \
  run-shell "tmux save-buffer - | $(tmux show-option -gqv @clipboard)"
# when scrolling up and copying with mouse it copies and clears the highlighting but
# it will not jump the cursor back to the latest command
# so you can jump on your own back e.g. with <Return> or Ctrl-C
# copy-selection-no-clear (if you want the highlighting to persist)
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection \; \
  run-shell "tmux save-buffer - | $(tmux show-option -gqv @clipboard)"

set -g base-index 1
set -w pane-base-index 1
# this renumbers windows like if you close window 2, window 3 becomes the new window 2
set -g renumber-windows on
set -g status-position top
# number of lines of output in the terminal to be stored
set -g history-limit 50000
# to be able to use mouse e.g. to scroll, click into panes, resize panes
set -g mouse on
# Styling
set -g status-style bg=#2D2F32
set -g status-right ""
# set color for active window
set -w window-status-current-style fg=red
# Remove the asterisk (*) from the active window and indicate if window is zoomed and indicate if current pane is remote session
# set-window-option -g window-status-current-format " #I #W#{?#{==:#{pane_current_command},ssh},*,}#{?window_zoomed_flag,+,} "
set -w window-status-current-format \
  '#{?#{==:#{pane_current_command},ssh},#[fg=yellow],#[fg=default]} #I #W#{?window_zoomed_flag,+,} '
# Remove the dash (-) from inactive windows
set -w window-status-format " #I #W "
# Set the color of inactive pane borders
set -g pane-border-style "fg=blue"

# Set the color of the active pane border
set -g pane-active-border-style "fg=blue"

# Change the color
# set -g mode-style "fg=black,bg=green"

# Shortcut to source the tmux conf file
bind r source-file ~/.tmux.conf \; display "Sourced .tmux.conf"
bind % split-window -hc "#{pane_current_path}"
bind '"' split-window -vc "#{pane_current_path}"
# new window will open with current path
bind c new-window -c "#{pane_current_path}"
# switch between previous window
bind Space last-window
# switch between previous session
bind C-Space switch-client -l
# vim like movement between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# center the window overview
set -g status-justify left # absolute-centre
# set refresh rate of the status bar (default 15), not too small!!!
set -g status-interval 5
# vim-style resizing of an active pane with prefix key because without Ctrl+L would interfere with clean
bind -r C-j resize-pane -D 15
bind -r C-k resize-pane -U 15
bind -r C-h resize-pane -L 15
bind -r C-l resize-pane -R 15

# Run a specific command when attaching or creating a new session
# the following 3 are classic hook configs
#set-hook -g session-created 'send-keys "fastfetch" Enter'
#set-hook -g client-attached 'send-keys "fastfetch" Enter'
#set-hook -g window-linked 'send-keys "fastfetch" Enter'

# execute fastfetch command when creating new session
# set-hook -g session-created 'run-shell "tmux send-keys fastfetch Enter"'
# executing fastfetch command when creating/linking new window in a session
# if same command as above would be used, fastfetch would be executed twice on the first window
# since index starts at 1 in this setup, only execute this for windows > 1
# set-hook -g window-linked 'run-shell "if [ #{window_index} -gt 1 ]; then tmux send-keys fastfetch Enter; fi"'
# if the window is switched to the lazygit window tmux should send 2r meaning:
# "switch to section 2 which is the file section and do r to refresh the files".
# therefore file changes are immediately and automatically visible in lazygit without having to manually 
# set-hook -g session-window-changed 'run-shell "if [ #{window_name} = "lazygit" ]; then tmux send-keys 2r; fi"'

# plugins
# set -g @plugin 'tmux-plugins/tpm'

# run '~/.tmux/plugins/tpm/tpm'
